// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

////////////////////////////////////////////////////////////////////////////////

// Copyright 2016 Pikkpoiss
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gamejam

import "fmt"

type SceneListID int

var ErrSceneNotInList = fmt.Errorf("Could not find item in list")

// A SceneNode represents a doubly-linked Scene.
type SceneNode struct {
	Scene
	id   SceneListID
	next *SceneNode
	prev *SceneNode
}

func (n *SceneNode) Next() *SceneNode {
	return n.next
}

func (n *SceneNode) SceneListID() SceneListID {
	return n.id
}

// Unlinks the node from the current list.
// Returns the next node for convenience while iterating.
func (n *SceneNode) Unlink() (next *SceneNode) {
	next = n.next
	if n.next != nil {
		n.next.prev = n.prev
	}
	if n.prev != nil {
		n.prev.next = n.next
	}
	n.next = nil
	n.prev = nil
	return
}

// A SceneList manages a list of SceneNode items.
type SceneList struct {
	nextID SceneListID
	head   *SceneNode
}

func NewSceneList(items ...Scene) (l *SceneList) {
	l = &SceneList{
		nextID: 1,
	}
	for i := len(items) - 1; i >= 0; i-- {
		l.Prepend(items[i])
	}
	return
}

func (l *SceneList) Head() *SceneNode {
	return l.head
}

func (l *SceneList) Prepend(item Scene) (node *SceneNode) {
	var id = l.nextID
	l.nextID++
	node = &SceneNode{
		Scene: item,
		id:    id,
		next:  l.head,
		prev:  nil,
	}
	if l.head != nil {
		l.head.prev = node
	}
	l.head = node
	return
}

// Attempts to remove `item` from the list.
// Returns ErrSceneNotInList if the ID did not exist in list.
func (l *SceneList) Remove(id SceneListID) (removed Scene, err error) {
	var node = l.Head()
	for node != nil {
		if node.SceneListID() == id {
			node.Unlink()
			removed = node.Scene
			return // Should only ever be one of an ID in a list.
		}
		node = node.Next()
	}
	err = ErrSceneNotInList
	return
}

// Unlinks all Scene items from this SceneList.
func (l *SceneList) Empty() {
	var node = l.Head()
	for node != nil {
		node = node.Unlink()
	}
}
